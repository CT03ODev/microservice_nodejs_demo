require('dotenv').config();
const express = require('express');
const { createClient } = require('@supabase/supabase-js');

const app = express();
app.use(express.json());

const PORT = process.env.PORT || 3002; // Cá»•ng cho Product Service

// Khá»Ÿi táº¡o Supabase Client
const supabaseUrl = process.env.SUPABASE_URL;
const supabaseKey = process.env.SUPABASE_ANON_KEY;
if (!supabaseUrl || !supabaseKey) {
    console.error("Lá»—i: SUPABASE_URL hoáº·c SUPABASE_ANON_KEY chÆ°a Ä‘Æ°á»£c cáº¥u hÃ¬nh trong .env");
    process.exit(1);
}
const supabase = createClient(supabaseUrl, supabaseKey);

// --- API Endpoints ---

// Láº¥y táº¥t cáº£ sáº£n pháº©m
app.get('/products', async (req, res) => {
    const { data, error } = await supabase
        .from('products')
        .select('*');

    if (error) {
        console.error('Lá»—i láº¥y danh sÃ¡ch sáº£n pháº©m:', error);
        return res.status(500).json({ error: 'Lá»—i server ná»™i bá»™' });
    }
    res.json(data);
});

// Láº¥y sáº£n pháº©m theo ID
app.get('/products/:id', async (req, res) => {
    const { id } = req.params;
    const { data, error } = await supabase
        .from('products')
        .select('*')
        .eq('id', id)
        .single();

    if (error) {
         if (error.code === 'PGRST116') {
             return res.status(404).json({ message: 'KhÃ´ng tÃ¬m tháº¥y sáº£n pháº©m' });
        }
        console.error(`Lá»—i láº¥y sáº£n pháº©m ${id}:`, error);
        return res.status(500).json({ error: 'Lá»—i server ná»™i bá»™' });
    }
     if (!data) {
         return res.status(404).json({ message: 'KhÃ´ng tÃ¬m tháº¥y sáº£n pháº©m' });
    }
    res.json(data);
});

// Táº¡o sáº£n pháº©m má»›i
app.post('/products', async (req, res) => {
    const { name, description, price, stock } = req.body;

    if (!name || price === undefined || price === null) {
        return res.status(400).json({ error: 'TÃªn vÃ  giÃ¡ lÃ  báº¯t buá»™c' });
    }
     if (isNaN(price) || Number(price) < 0) {
         return res.status(400).json({ error: 'GiÃ¡ pháº£i lÃ  má»™t sá»‘ khÃ´ng Ã¢m' });
     }
     if (stock !== undefined && (isNaN(stock) || Number(stock) < 0)) {
         return res.status(400).json({ error: 'Sá»‘ lÆ°á»£ng tá»“n kho (stock) pháº£i lÃ  má»™t sá»‘ khÃ´ng Ã¢m' });
     }

    const { data, error } = await supabase
        .from('products')
        .insert([{ name, description, price: Number(price), stock: stock !== undefined ? Number(stock) : 0 }]) // Ã‰p kiá»ƒu vÃ  Ä‘áº·t giÃ¡ trá»‹ máº·c Ä‘á»‹nh náº¿u cáº§n
        .select()
        .single();

    if (error) {
        console.error('Lá»—i táº¡o sáº£n pháº©m:', error);
        return res.status(500).json({ error: 'Lá»—i server ná»™i bá»™ khi táº¡o sáº£n pháº©m' });
    }

    res.status(201).json(data);
});

// Cáº­p nháº­t sáº£n pháº©m
app.put('/products/:id', async (req, res) => {
    const { id } = req.params;
    const { name, description, price, stock } = req.body;

    const updates = {};
    if (name) updates.name = name;
    if (description !== undefined) updates.description = description;
    if (price !== undefined) {
         if (isNaN(price) || Number(price) < 0) {
             return res.status(400).json({ error: 'GiÃ¡ pháº£i lÃ  má»™t sá»‘ khÃ´ng Ã¢m' });
         }
         updates.price = Number(price);
    }
     if (stock !== undefined) {
         if (isNaN(stock) || Number(stock) < 0) {
             return res.status(400).json({ error: 'Sá»‘ lÆ°á»£ng tá»“n kho (stock) pháº£i lÃ  má»™t sá»‘ khÃ´ng Ã¢m' });
         }
         updates.stock = Number(stock);
     }


    if (Object.keys(updates).length === 0) {
        return res.status(400).json({ error: 'KhÃ´ng cÃ³ thÃ´ng tin nÃ o Ä‘Æ°á»£c cung cáº¥p Ä‘á»ƒ cáº­p nháº­t' });
    }

    const { data, error } = await supabase
        .from('products')
        .update(updates)
        .eq('id', id)
        .select()
        .single();

     if (error) {
         if (error.code === 'PGRST116' || error.message.includes('exactly one row')) {
            return res.status(404).json({ message: 'KhÃ´ng tÃ¬m tháº¥y sáº£n pháº©m Ä‘á»ƒ cáº­p nháº­t' });
        }
        console.error(`Lá»—i cáº­p nháº­t sáº£n pháº©m ${id}:`, error);
        return res.status(500).json({ error: 'Lá»—i server ná»™i bá»™ khi cáº­p nháº­t sáº£n pháº©m' });
    }
     if (!data) {
         return res.status(404).json({ message: 'KhÃ´ng tÃ¬m tháº¥y sáº£n pháº©m sau khi cáº­p nháº­t' });
    }

    res.json(data);
});

// XÃ³a sáº£n pháº©m
app.delete('/products/:id', async (req, res) => {
    const { id } = req.params;

    const { data, error } = await supabase
        .from('products')
        .delete()
        .eq('id', id)
        .select()
        .single(); // Mong Ä‘á»£i xÃ³a 1

     if (error) {
        console.error(`Lá»—i xÃ³a sáº£n pháº©m ${id}:`, error);
        return res.status(500).json({ error: 'Lá»—i server ná»™i bá»™ khi xÃ³a sáº£n pháº©m' });
    }
     if (!data) {
         return res.status(404).json({ message: 'KhÃ´ng tÃ¬m tháº¥y sáº£n pháº©m Ä‘á»ƒ xÃ³a' });
    }

    res.status(200).json({ message: 'Sáº£n pháº©m Ä‘Ã£ Ä‘Æ°á»£c xÃ³a thÃ nh cÃ´ng', deletedProduct: data });
    // res.status(204).send();
});

// Khá»Ÿi Ä‘á»™ng server
app.listen(PORT, () => {
    console.log(`ðŸš€ Product Service Ä‘ang cháº¡y trÃªn cá»•ng ${PORT}`);
    console.log(`âœ… Káº¿t ná»‘i tá»›i Supabase URL: ${supabaseUrl ? supabaseUrl.substring(0, 20) + '...' : 'ChÆ°a cáº¥u hÃ¬nh'}`);
});